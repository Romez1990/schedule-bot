from aiogram import executor, types
from telegram_bot.configurations.configure import dp
from telegram_bot.configurations.button_configuration import buttons
from aiogram.types import ParseMode

import logging

# Configure logging
logging.basicConfig(level=logging.INFO)


class Greeting:
    def __init__(self):
        pass

    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message) -> None:
        """
        This handler will be called when user sends `/start`
        :param message: types.Message
        :return: None
        """
        message_text = '''
<strong>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥–æ—Ä–æ–≥–æ–π —Å—Ç—É–¥–µ–Ω—Çüëã<strike>–∏–ª–∏ —É–∂–µ –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç</strike>\n
ü¶æ–Ø –±–æ—Ç –ø–æ–∑–≤–æ–ª—è—é—â–µ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ãüë®‚Äçüíª\n
–ù–∞–ø–∏—à–∏ –º–Ω–µ: –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è [–ù–∞–∑–≤–∞–Ω–∏–µ_–ì—Ä—É–ø–ø—ã] (–±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–∏)</strong>
        '''
        await message.reply(message_text, reply_markup=buttons, parse_mode=ParseMode.HTML)

    @dp.message_handler(commands=['help'])
    async def send_help(message: types.Message) -> None:
        """
        This handler will be called when user sends `/help`
        :param message: types.Message
        :return: None
        """
        message_text = '''
<em>/start</em> - <strong>–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞</strong> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω)\n
<em>–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è [–ù–∞–∑–≤–∞–Ω–∏–µ_–ì—Ä—É–ø–ø—ã]</em> - <strong>–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</strong>\n
<em>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è [–ù–∞–∑–≤–∞–Ω–∏–µ_–ì—Ä—É–ø–ø—ã]</em> - <strong>–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</strong>\n
<em>–¢—ë–º–Ω–∞—è —Ç–µ–º–∞</em> - <strong>–ø–æ–ª—É—á–∞—Ç—å—Å—è —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç—ë–º–Ω–æ–π —Ç–µ–º–µ</strong>\n
<em>–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞</em> - <strong>–ø–æ–ª—É—á–∞—Ç—å—Å—è —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–≤–µ—Ç–≤–ª–æ–π —Ç–µ–º–µ</strong>\n
        '''

        await message.reply(message_text, reply_markup=buttons, parse_mode=ParseMode.HTML)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
